diff --git a/source/CMakeLists.txt b/source/CMakeLists.txt
index 3302bfd..14ec8fa 100644
--- a/source/CMakeLists.txt
+++ b/source/CMakeLists.txt
@@ -16,7 +16,7 @@ set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -D_ANSC_LINUX ")
 set(WEBCONFIG_PATCH "${PATCHES_DIR}/Web_config_XML.patch")
 set(SOURCES broadband/ssp_messagebus_interface.c broadband/ssp_main.c broadband/ssp_action.c broadband/cosa_webpa_dml.c broadband/cosa_webpa_internal.c broadband/cosa_webpa_apis.c broadband/plugin_main.c broadband/plugin_main_apis.c broadband/webpa_adapter.c broadband/webpa_internal.c broadband/webpa_table.c broadband/webpa_replace.c broadband/webpa_parameter.c broadband/webpa_attribute.c broadband/webpa_notification.c app/main.c app/libpd.c app/privilege.c)
 
-if (BUILD_YOCTO)
+if (BUILD_YOCTO AND RDK_BUILD)
 set(SOURCES ${SOURCES} broadband/dm_pack_datamodel.c)
 endif()
 
@@ -36,13 +36,28 @@ else()
 endif()
 endif()
 set(HEADERS app/libpd.h)
+
+if (PARODUS2CCSP_APP)
+
 add_executable(webpa ${SOURCES} ${HEADERS})
+set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DPARODUS2CCSP_APP ")
+else ()
+
+add_library(webpa SHARED ${SOURCES} ${HEADERS})
+endif (PARODUS2CCSP_APP)
+
 set(COMMON_LIBS -ldbus-1 -lccsp_common -lwrp-c -lpthread -lwdmp-c -lmsgpackc -ltrower-base64 -lm -lnanomsg -lcjson -lrt -luuid -llibparodus -lcimplog)
-if (BUILD_YOCTO)
+if (BUILD_YOCTO AND RDK_BUILD)
 set(COMMON_LIBS "${COMMON_LIBS} -llog4c -lrdkloggers -lprint_uptime")
 endif()
 if (FEATURE_SUPPORT_WEBCONFIG)
 set(COMMON_LIBS "${COMMON_LIBS} -lcurl -lwebcfg")
 endif()
 target_link_libraries (webpa ${CMAKE_THREAD_LIBS_INIT} ${COMMON_LIBS})
-install (TARGETS webpa DESTINATION bin)
+
+if (PARODUS2CCSP_APP)
+set (INSTALL_DIR bin)
+else ()
+set (INSTALL_DIR lib)
+endif ()
+install (TARGETS webpa DESTINATION ${INSTALL_DIR})
diff --git a/source/app/libpd.c b/source/app/libpd.c
index 800a630..17e75d5 100644
--- a/source/app/libpd.c
+++ b/source/app/libpd.c
@@ -39,9 +39,16 @@ char *cloud_status = "offline";
 int wakeUpFlag = 0;
 pthread_mutex_t cloud_mut=PTHREAD_MUTEX_INITIALIZER;
 pthread_cond_t cloud_con=PTHREAD_COND_INITIALIZER;
+bool receive_data = true;
+
+void shutdown_connection()
+{
+	receive_data = false;
+}
 
 static void connect_parodus()
 {
+	receive_data = true;
         int backoffRetryTime = 0;
         int backoff_max_time = 5;
         int max_retry_sleep;
@@ -247,7 +254,7 @@ void *parallelProcessTask(void *id)
 		WalPrint("Detaching parallelProcess thread\n");
         	pthread_detach(pthread_self());
 	}
-        while( FOREVER() )
+        while( receive_data == true )
         {
                 parodus_receive();
         }
diff --git a/source/app/libpd.h b/source/app/libpd.h
index e6d8b49..634ddf6 100644
--- a/source/app/libpd.h
+++ b/source/app/libpd.h
@@ -7,3 +7,4 @@
  */
 
 void libpd_client_mgr();
+void shutdownConnection();
diff --git a/source/app/main.c b/source/app/main.c
index 7bd7b14..d34a696 100644
--- a/source/app/main.c
+++ b/source/app/main.c
@@ -27,8 +27,13 @@ static void sig_handler(int sig);
 /*                             External Functions                             */
 /*----------------------------------------------------------------------------*/
 
+#if (PARODUS2CCSP_APP)
 int main()
 {
+#else
+int Parodus2CCSPMain()
+{
+#endif
         int ret = -1;
 
 #ifdef INCLUDE_BREAKPAD
@@ -82,7 +87,7 @@ curl_global_cleanup();
 #ifndef INCLUDE_BREAKPAD
 static void sig_handler(int sig)
 {
-
+	shutdown_connection();
 	if ( sig == SIGINT ) 
 	{
 		signal(SIGINT, sig_handler); /* reset it to this function */
diff --git a/source/broadband/ssp_main.c b/source/broadband/ssp_main.c
index 48b76be..6a3a249 100755
--- a/source/broadband/ssp_main.c
+++ b/source/broadband/ssp_main.c
@@ -116,9 +116,10 @@ WDMP_STATUS msgBusInit(const char *pComponentName)
     AnscCopyString(g_Subsystem, "");
 #endif
 
-    if ( bRunAsDaemon ) 
+    if ( bRunAsDaemon )
+#if (PARODUS2CCSP_APP)
         daemonize();
-
+#endif
     cmd_dispatch('e');
 
     subSys = NULL;      /* use default sub-system */
@@ -130,7 +131,7 @@ WDMP_STATUS msgBusInit(const char *pComponentName)
         exit(1);
     }
     system("touch /tmp/webpa_initialized");
-if ( bRunAsDaemon )
+    if ( bRunAsDaemon )
     {
         return WDMP_FAILURE;
     }
